------------------------------------------------------------------------------
Given only a pointer to a node, how do you delete node from Singly Linked List.

A simple solution is to traverse the linked list until you find the node you
want to delete. But this solution requires pointer to the head node which
contradicts the problem statement.

Fast solution is to copy the data from the next node to the node to be deleted
and delete the next node. Something like following.

    void deleteNode(struct node *node_ptr)  
    {   
       struct node *temp = node_ptr->next;
       node_ptr->data    = temp->data;
       node_ptr->next    = temp->next;
       free(temp);
    }

This solution doesn’t work if the node to be deleted is the last node of the
list. To make this solution work we can mark the end node as a dummy node. But
the programs/functions that are using this function should also be modified.

------------------------------------------------------------------------------
Split a Circular Linked List into Two Halves

Algorithm

1) Store the mid and last pointers of the circular linked list using tortoise
and hare algorithm.
2) Make the second half circular.
3) Make the first half circular.
4) Set head (or start) pointers of the two linked lists.

Time Complexity: O(n)

------------------------------------------------------------------------------
Loop Detection in a linked list

Brute force method :
Have a double loop, where you check the node pointed to by the outer loop, with
every node of the inner loop.

typedef struct node
{
  void *data;
  struct node *next;
}mynode;

mynode * find_loop( mynode * head )
{
  mynode *current = head;
  while( current -> next != NULL )
  {
    mynode *temp = head;
    while( temp -> next != NULL && temp != current )
    {
      if( current -> next == temp )
      {
        printf("\nFound a loop.");
        return current;
      }
      temp = temp -> next;
    }
  current = current -> next;
  }
return NULL;
}

Visited flag :
Have a visited flag in each node of the linked list. Flag it as visited when you
reach the node. When you reach a node and the flag is already flagged as
visited, then you know there is a loop in the linked list.

Fastest method :
Have 2 pointers to start of the linked list. Increment one pointer by 1 node and
the other by 2 nodes. If there’s a loop, the 2nd pointer will meet the 1st
pointer somewhere. If it does, then you know there’s one.

p = head;
q = head -> next;
while( p != NULL && q != NULL )
{
  if( p == q )
  {
    //Loop detected!
    exit( 0 );
  }
  p = p -> next;
  q = ( q -> next ) ? ( q -> next -> next ) : q -> next;
}
// No loop.






