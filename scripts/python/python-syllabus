GE8151 : PROBLEM SOLVING AND PYTHON PROGRAMMING
OBJECTIVES:
 To know the basics of algorithmic problem solving
 To read and write simple Python programs.
 To develop Python programs with conditionals and loops.
 To define Python functions and call them.
 To use Python data structures –- lists, tuples, dictionaries.
 To do input/output with files in Python.

UNIT I
ALGORITHMIC PROBLEM SOLVING
Algorithms, building blocks of algorithms (statements, state, control flow,
functions), notation (pseudo code, flow chart, programming language), algorithmic 
problem solving, simple strategies for developing algorithms (iteration, 
recursion). 
Illustrative problems: find minimum in a list, insert a card in a list of sorted 
cards, guess an integer number in a range, Towers of Hanoi.

UNIT II
DATA, EXPRESSIONS, STATEMENTS
Python interpreter and interactive mode; values and types: int, float, boolean,
string, and list; variables, expressions, statements, tuple assignment, 
precedence of operators, comments; modules and functions, function definition 
and use, flow of execution, parameters and arguments; 
Illustrative programs: exchange the values of two variables, circulate the 
values of n variables, distance between two points.

UNIT III
CONTROL FLOW, FUNCTIONS
Conditionals: Boolean values and operators, conditional (if), alternative
(if-else), chained conditional (if-elif-else); Iteration: state, while, for, 
break, continue, pass; Fruitful functions: return values, parameters, local and 
global scope, function composition, recursion; Strings: string slices,
immutability, string functions and methods, string module; Lists as arrays.
Illustrative programs:
square root, gcd, exponentiation, sum an array of numbers, linear search, binary
search.

UNIT IV
LISTS, TUPLES, DICTIONARIES
Lists: list operations, list slices, list methods, list loop, mutability,
aliasing, cloning lists, list parameters; Tuples: tuple assignment, tuple as 
return value; Dictionaries: operations and methods; advanced list
processing - list comprehension; 
Illustrative programs: selection sort, insertion sort, mergesort, histogram.

UNIT V
FILES, MODULES, PACKAGES
Files and exception: text files, reading and writing files, format operator;
command line arguments,
errors and exceptions, handling exceptions, modules, packages; Illustrative
programs: word count,
copy file.

OUTCOMES:
Upon completion of the course, students will be able to
 Develop algorithmic solutions to simple computational problems
 Read, write, execute by hand simple Python programs.
 Structure simple Python programs for solving problems.
 Decompose a Python program into functions.
 Represent compound data using Python lists, tuples, dictionaries.
 Read and write data from/to files in Python Programs.

================================================================================

GE8161 : PROBLEM SOLVING AND PHYTHON PROGRAMMING
LABORATORY
OBJECTIVES
 To write, test, and debug simple Python programs.
 To implement Python programs with conditionals and loops.
 Use functions for structuring Python programs.
 Represent compound data using Python lists, tuples, dictionaries.
 Read and write data from/to files in Python.

LIST OF PROGRAMS
1. Compute the GCD of two numbers.
2. Find the square root of a number (Newton‘s method)
3. Exponentiation (power of a number)
4. Find the maximum of a list of numbers
5. Linear search and Binary search
6. Selection sort, Insertion sort
7. Merge sort
8. First n prime numbers
9. Multiply matrices
10. Programs that take command line arguments (word count)
11. Find the most frequent words in a text read from a file
12. Simulate elliptical orbits in Pygame
13. Simulate bouncing ball using Pygame

PLATFORM NEEDED
Python 3 interpreter for Windows/Linux
OUTCOMES
Upon completion of the course, students will be able to
 Write, test, and debug simple Python programs.
 Implement Python programs with conditionals and loops.
 Develop Python programs step-wise by defining functions and calling them.
 Use Python lists, tuples, dictionaries for representing compound data.
 Read and write data from/to files in Python.
